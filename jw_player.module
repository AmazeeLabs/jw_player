<?php
/**
 * @file
 * Adds a theme function which allows theme developers to use the JW Player.
 */

/**
 * Implements hook_permission().
 */
function jw_player_permission() {
  return array(
    'administer JW Player presets' => array(
      'title' => t('administer JW Player presets'),
      'description' => t('Perform administration of JW Player presets'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function jw_player_theme() {
  return array(
    'jw_player_formatter' => array(
      'variables' => array('files' => array(), 'preset' => '', 'image_syle' => NULL),
      'file' => 'jw_player.theme.inc',
    ),
    'jw_player' => array(
      'variables' => array('config' => array()),
      'file' => 'jw_player.theme.inc',
    ),
  );
  return $themes;
}

/**
 * Implements hook_field_formatter_info().
 */
function jw_player_field_formatter_info() {
  $formatters = array(
    'jw_player' => array(
      'label' => t('JW player'),
      'field types' => array('file', 'media'),
      'settings' => array(
        'skin' => '',
        'image_style' => '',
        'jwplayer_preset' => '',
      ),
    ),
    'jw_player_playlist' => array(
      'label' => t('JW player playlist'),
      'field types' => array('file', 'media'),
      'settings' => array(
        'image_style' => '',
        'jwplayer_preset' => '',
      ),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * @todo "skin" variable in field formatter settings is requied by JW Player
 * field, with presets being made available and a preset already holding
 * information of the skin, The additional variable seems to be duplicate and
 * can be done away with. A decision needs to be made about the JW Player
 * field. It removed this code can be removed.
 */
function jw_player_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $image_module_exists = module_exists('image');

  // formatter types
  switch ($display['type']) {
    case 'jw_player':
    case 'jw_player_playlist':
      // Load existing presets within the system
      foreach (jw_player_preset_load() as $preset => $item) {
        $options[$preset] = $item['preset_name'];
      }
      $element['jwplayer_preset'] = array(
        '#title' => t('JW Player presets'),
        '#type' => 'select',
        '#default_value' => ($settings['jwplayer_preset']) ?  $settings['jwplayer_preset'] : FALSE,
        '#options' => $options,
      );
      break;

    default:
      if ($image_module_exists && strstr($display['type'], 'image')) {
        $link_types = array(
          'content' => t('Content'),
          'file' => t('File'),
        );

        // If the Fancybox library is enabled, add the option to open the video in an overlay.
        foreach (module_implements('library') as $module) {
          if ($library = drupal_get_library($module, 'fancybox')) {
            $link_types['fancybox'] = t('Fancybox');
            break;
          }
        }

        $element['image_link'] = array(
          '#title' => t('Link image to'),
          '#type' => 'select',
          '#default_value' => $settings['image_link'],
          '#empty_option' => t('Nothing'),
          '#options' => $link_types,
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jw_player_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $image_module_exists = module_exists('image');

  $summary = array();
  $presets = jw_player_preset_load();

  if (isset($presets[$settings['jwplayer_preset']])) {
    $summary[] = t('Preset: @name', array('@name' => $presets[$settings['jwplayer_preset']]['preset_name']));
    $summary[] = t('Description: @description', array('@description' => $presets[$settings['jwplayer_preset']]['description']));

    $settings = $presets[$settings['jwplayer_preset']]['settings'];
    foreach ($settings as $key => $val) {
      $summary[] = t('@key: @val', array('@key' => $key, '@val' => !empty($val) ? $val : t('Default')));
    }
  }
  else {
    $summary[] = t('Default preset');
  }

  if ($image_module_exists) {
    $link_types = array(
      'content' => t('Linked to content'),
      'file' => t('Linked to file'),
    );
    // Display this setting only if image is linked.
    if (isset($settings['image_link']) && isset($link_types[$settings['image_link']])) {
      $summary[] = $link_types[$settings['image_link']];
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function jw_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $image_module_exists = module_exists('image');

  // process files for theme functions
  $files = array();
  foreach ($items as $delta => $item) {
    $files[$delta] = (object) $item;
    if (!empty($item['preview_image_fid']) && ($preview_image = file_load($item['preview_image_fid']))) {
      $files[$delta]->preview_image = $preview_image;
    }
  }

  // player formatters
  $image_style = !empty($display['settings']['image_style']) ? $display['settings']['image_style'] : '';
  switch ($display['type']) {
    case 'jw_player':
      foreach ($files as $delta => $file) {
        $element[$delta] = array(
          '#theme' => 'jw_player_formatter',
          '#files' => array($file),
          '#preset' => $display['settings']['jwplayer_preset'],
          '#image_style' => $image_style,
        );
      }
      break;

    case 'jw_player_playlist':
      $element[0] = array(
        '#theme' => 'jw_player_formatter',
        '#files' => $files,
        '#preset' => $display['settings']['jwplayer_preset'],
        '#image_style' => $image_style,
      );
      break;

    default:
      // image formatter if the formatter involves a link.
      if ($image_module_exists && isset($display['settings']['image_link']) && in_array($display['settings']['image_link'], array('content', 'file'))) {
        $preview_items = array();
        foreach ($files as $delta => $file) {
          if (isset($file->preview_image)) {
            $preview_items[$delta] = (array) $file->preview_image;
          }
        }
        return image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $preview_items, $display);
      }
      break;
  }

  return $element;
}

/**
 * Retrieves all available skins,
 */
function jw_player_skins($name = NULL) {
  $skins = &drupal_static(__FUNCTION__);

  if (!isset($skins)) {
    $directory = libraries_get_path('jwplayer_skins');
    $skins = file_scan_directory($directory, '/\.xml|\.swf$/');
  }

  if ($name) {
    foreach ($skins as $file) {
      if ($file->name == $name) {
        return $file;
      }
    }
  }
  return $skins;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function jw_player_ctools_plugin_api($owner, $api) {
  if ($owner == 'jw_player' && $api == 'jw_player_presets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_default_jwplayer_presets().
 */
function jw_player_default_jw_player_presets() {
  $export = array();

  $jwplayer_preset = new stdClass;
  $jwplayer_preset->disabled = FALSE; /* Edit this to true to make a default jwplayer_preset disabled initially */
  $jwplayer_preset->api_version = 1;
  $jwplayer_preset->preset_name = '640 x 480';
  $jwplayer_preset->machine_name = 'large';
  $jwplayer_preset->description = 'Displays video in 640x480 resolution. Provided as a default to get started quickly, can be disabled.';
  $jwplayer_preset->settings = array(
    'width' => '640',
    'height' => '480',
  );

  $export['default_large'] = $jwplayer_preset;

  return $export;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function jw_player_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Load a given preset(s)
 * @param string $machine_name
 * @return array
 */
function jw_player_preset_load($machine_name = NULL){
  if (isset($machine_name)){
    $items = ctools_export_crud_load('jwplayer_preset', $machine_name);

    // CTools returns an object, so we explictly typecast it to array before returning
    $items =  (array) $items;
  }
  else {
    $result = ctools_export_crud_load_all('jwplayer_preset');
    foreach ($result as $key => $item) {
      $items[$key] = (array) $item;
    }
  }
  return $items;
}

/**
 * Returns default settings
 */
function jw_player_default_settings() {
  $defaults = &drupal_static(__FUNCTION__);

  if (!isset($defaults)) {
    $player_path = libraries_get_path('jwplayer');
    $defaults = array(
      'flashplayer' => file_create_url($player_path . '/player.swf'),
      'width' => '640',
      'height' => '480',
      'controlbar' => 'bottom',
      'playlist.position' => 'right',
      'playlist.size' => '180',
    );
  }

  return $defaults;
}
