<?php
/**
 * @file
 * Adds a theme function which allows theme developers to use the JW Player.
 */

/**
 * Implements hook_permission().
 */
function jw_player_permission() {
  return array(
    'administer JW Player presets' => array(
      'title' => t('administer JW Player presets'),
      'description' => t('Perform administration of JW Player presets'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function jw_player_theme() {
  return array(
    'jw_player' => array(
      'variables' => array(
        'file_url' => '',
        'preset' => '',
        'file_mime' => '',
        'options' => array(),
      ),
      'template' => 'theme/jw_player',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jw_player_field_formatter_info() {
  $formatters = array(
    'jw_player' => array(
      'label' => t('JW player'),
      'field types' => array('file'),
      'settings' => array(
        'jwplayer_preset' => '',
      ),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jw_player_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // formatter types
  switch ($display['type']) {
    case 'jw_player':
      // Load existing presets within the system
      foreach (jw_player_preset_load() as $preset => $item) {
        $options[$preset] = $item['preset_name'];
      }
      $element['jwplayer_preset'] = array(
        '#title' => t('JW Player presets'),
        '#type' => 'select',
        '#default_value' => ($settings['jwplayer_preset']) ?  $settings['jwplayer_preset'] : FALSE,
        '#options' => $options,
      );
      break;

    default:
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jw_player_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $presets = jw_player_preset_load();

  if (isset($presets[$settings['jwplayer_preset']])) {
    $summary[] = t('Preset: @name', array('@name' => $presets[$settings['jwplayer_preset']]['preset_name']));
    $summary[] = t('Description: @description', array('@description' => $presets[$settings['jwplayer_preset']]['description']));

    $settings = $presets[$settings['jwplayer_preset']]['settings'];
    foreach ($settings as $key => $val) {
      $summary[] = t('@key: @val', array('@key' => $key, '@val' => !empty($val) ? $val : t('Default')));
    }
  }
  else {
    $summary[] = t('No preset selected');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function jw_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'jw_player') {
    // Process files for theme functions
    $files = array();
    foreach ($items as $delta => $item) {
      $files[$delta] = (object) $item;
    }
    // Create a file url to pass to
    $file_url = file_create_url($item['uri']);
    $file_mime = $item['filemime'];

    foreach ($files as $delta => $file) {
      $element[$delta] = array(
        '#theme' => 'jw_player',
        '#file_url' => $file_url,
        '#preset' => $display['settings']['jwplayer_preset'],
        '#file_mime' => $file_mime,
      );
    }
  }
  return $element;
}

/**
 * Retrieves all available skins,
 */
function jw_player_skins($name = NULL) {
  $skins = &drupal_static(__FUNCTION__);

  if (!isset($skins)) {
    $directory = libraries_get_path('jwplayer_skins');
    $skins = file_scan_directory($directory, '/\.xml|\.swf$/');
  }

  if ($name) {
    foreach ($skins as $file) {
      if ($file->name == $name) {
        return $file;
      }
    }
  }
  return $skins;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function jw_player_ctools_plugin_api($owner, $api) {
  if ($owner == 'jw_player' && $api == 'jw_player_presets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function jw_player_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Load a given preset(s)
 * @param string $machine_name
 * @return array
 */
function jw_player_preset_load($machine_name = NULL){
  if (isset($machine_name)){
    $items = ctools_export_crud_load('jwplayer_preset', $machine_name);

    // CTools returns an object, so we explictly typecast it to array before returning
    $items =  (array) $items;
  }
  else {
    $result = ctools_export_crud_load_all('jwplayer_preset');
    foreach ($result as $key => $item) {
      $items[$key] = (array) $item;
    }
  }
  return $items;
}

/**
 * Returns default settings
 */
function jw_player_default_settings() {
  $defaults = &drupal_static(__FUNCTION__);

  if (!isset($defaults)) {
    $player_path = libraries_get_path('jwplayer');
    $defaults = array(
      'flashplayer' => file_create_url($player_path . '/player.swf'),
      'width' => '640',
      'height' => '480',
      'autoplay' => FALSE,
      'controlbar' => 'bottom',
    );
  }

  return $defaults;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jw_player_preprocess_jw_player(&$variables) {
  $player_path = libraries_get_path('jwplayer');

  // Load defaults as the starting point.
  $default_settings = jw_player_default_settings();

  // Load preset if set.
  $preset_settings = array();

  if (!empty($variables['preset'])) {
    $preset = jw_player_preset_load($variables['preset']);
    $preset_settings = $preset['settings'];
  }

  // Get any preset override options that were sent through the formatter or theme call
  $options = array();
  if (isset($variables['options'])) {
    $options = $variables['options'];
    unset($variables['options']);
  }

  // Merge all variables together. Preset settings take priority over defaults,
  // variables passed directly to the theme function take priority over both.
  $variables = array_merge($default_settings, $preset_settings, $options, $variables);

  // Give each instance of the player a unique id.
  $variables['html_id'] = drupal_html_id('jw_player');

  // Resolve skin url
  $skin = !empty($variables['skin']) ? jw_player_skins($variables['skin']) : '';
  $variables['skin_url'] = !empty($skin) ? file_create_url($skin->uri) : '';

  // Copy player variables into their own array to be set as javascript configuration.
  // @todo Bad smell here. Refactoring needed.
  $player_variables = array('width', 'height', 'controlbar', 'playlist.position', 'playlist.size', 'skin', 'autoplay');
  foreach ($player_variables as $key) {
    if (!empty($variables[$key])) {
      $variables['config'][$key] = $variables[$key];
    }
  }

  // Set default player mode.
  // @todo Make player mode configurable.
  $variables['config']['modes'] = array(
    array('type' => 'html5'),
    array(
      'type' => 'flash',
      'src' => file_create_url($player_path . '/player.swf'),
    ),
  );

  // Add dependent resources
  drupal_add_js($player_path . '/jwplayer.js'); // Add library
  drupal_add_js(drupal_get_path('module', 'jw_player') . '/jw_player.js'); // Attaches JW Player element
  drupal_add_js(array('jw_player' => array($variables['html_id'] => $variables['config'])), 'setting'); // Player settings
}
