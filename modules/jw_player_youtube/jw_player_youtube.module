<?php
// $Id: jw_player_youtube.module,v 1.68 2010/11/13 07:39:35 webchick Exp $

/**
 * @file
 * Defines JW Player - Youtube field types.
 */

define('YOUTUBE_THUMB_PATH', 'youtube_thumbs');
define('YOUTUBE_API_URL', 'http://gdata.youtube.com/feeds/api/videos/');
define('YOUTUBE_VIDEO_URL', 'http://www.youtube.com/watch?v=');
define('YOUTUBE_IMAGE_URL', 'http://img.youtube.com/vi/');

/**
 * Implements hook_field_info().
 */
function jw_player_youtube_field_info() {
  return array(
    'jw_player_youtube' => array(
      'label' => t('JW Player - Youtube'),
      'description' => t('This field stores Youtube ID\'s in the database.'),
      'instance_settings' => array('youtube_id' => ''),
      'default_widget' => 'jw_player_youtube_field',
      'default_formatter' => 'jw_player_youtube',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function jw_player_youtube_field_is_empty($item, $field) {
  return (!isset($item['youtube_id']) || empty($item['youtube_id']));
}

/**
 * Implements hook_field_widget_info().
 */
function jw_player_youtube_field_widget_info() {
  return array(
    'jw_player_youtube_field' => array(
      'label' => 'JW Player - Youtube',
      'field types' => array('jw_player_youtube'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function jw_player_youtube_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['youtube_id']) ? $items[$delta]['youtube_id'] : '',
    '#element_validate' => array('_element_validate_youtube_id'),
  );
  return array('youtube_id' => $element);
}

/**
 * Helper function for YouTube ID validation.
 */
function _element_validate_youtube_id($element, &$form_state) {
  $value = $element['#value'];

  if (strstr($value, YOUTUBE_VIDEO_URL)) {
    drupal_set_message(t('The YouTube ID has been stripped from the submitted url.'), 'warning');
    $value = str_replace(YOUTUBE_VIDEO_URL, '', $value);
    $form_state['values']['field_youtube'][$element['#language']][$element['#delta']]['youtube_id'] = $value;
  }

  if ($result = file_get_contents(YOUTUBE_API_URL. $value)) {
    if ($value != '' && $result == 'Invalid id') {
      form_error($element, t('%name is not a valid YouTube ID.', array('%name' => $element['#title'])));
    }
  }
  else {
    drupal_set_message(t('Could not verify the YouTube ID because there seemed to be a connection error.'));
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function jw_player_youtube_field_formatter_info() {
  $formatters = array(
    'jw_player_youtube' => array(
      'label' => t('JW player'),
      'field types' => array('jw_player_youtube'),
      'settings' => array('image_style' => ''),
    ),
    'jw_player_youtube_image' => array(
      'label' => t('JW player image'),
      'field types' => array('jw_player_youtube'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );
  return $formatters;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function jw_player_youtube_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  return jw_player_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jw_player_youtube_field_formatter_settings_summary($field, $instance, $view_mode) {
  return jw_player_field_formatter_settings_summary($field, $instance, $view_mode);
}

/**
 * Implementation of hook_theme()
 */
function jw_player_youtube_theme() {
  return array(
    'jw_player_youtube_formatter' => array(
      'variables' => array('item' => NULL, 'image_style' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function jw_player_youtube_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (strstr($display['type'], 'image')) {
    foreach ($items as $delta => $item) {
      $items[$delta] = (array) jw_player_youtube_thumb($item['youtube_id']);
      $items[$delta]['alt'] = $items[$delta]['title'] = '';
    }
    module_load_include('inc', 'image', 'image.field');
    $element = image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);

    if (isset($display['settings']['image_link']) && $display['settings']['image_link'] == 'fancybox') {
      drupal_add_library('jqp', 'fancybox');

      foreach (element_children($element) as $delta) {
        $basename = basename($element[$delta]['#item']['filepath']);
        $youtube_id = substr($basename, 0, strrpos($basename, '.'));

        $element[$delta]['#path'] = array('path' => YOUTUBE_VIDEO_URL . $youtube_id, 'options' => array('attributes' => array('class' => 'jw-player-fancybox')));
        $element['#attached']['js'][drupal_get_path('module', 'jw_player') . '/jw_player-fancybox.js'] = array();
      }
    }
  }
  else {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#theme' => 'jw_player_youtube_formatter',
        '#item' => $item,
        '#image_style' => $display['settings']['image_style'],
      );
    }
  }
  return $element;
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style: An optional image style.
 *
 * @ingroup themeable
 */
function theme_jw_player_youtube_formatter($variables) {
  $youtube_id = $variables['item']['youtube_id'];
  $preview = jw_player_youtube_thumb($youtube_id);

  if ($variables['image_style']) {
    // $preview_path = ($variables['image_style'] ? image_style_path($variables['image_style'], $preview->uri) : $preview->uri);
    $preview_path = image_style_path($variables['image_style'], $preview->uri);
    if (!file_exists($preview_path)) {
      image_style_create_derivative($variables['image_style'], $preview->uri, $preview_path);
    }
  }
  else {
    $preview_path = $preview->uri;
  }

  // Get the image dimensions. These will overwrite the dimensions of the player if they aren't set
  $info = image_get_info($preview_path);

  $config = array(
    'flashplayer' => file_create_url(drupal_get_path('module', 'jw_player') . '/mediaplayer/player.swf'),
    'width' => (isset($variables['width']) ? $variables['width'] : $info['width']),
    'height' => (isset($variables['height']) ? $variables['height'] : $info['height']),
    'file' => YOUTUBE_VIDEO_URL. $youtube_id,
    'image' => file_create_url($preview_path),
  );

  return theme('jw_player', array('config' => $config));
}

/**
 * Fetches a Youtube thumbnail image from the YuoTube server.
 */
function jw_player_youtube_thumb($youtube_id) {

  $directory = variable_get('file_public_path', conf_path() . '/files') .'/'. YOUTUBE_THUMB_PATH;

  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    // Create a file object for the preview image.
    $path = 'public://' . YOUTUBE_THUMB_PATH;
    $filename = $youtube_id . '.jpg';
    $preview = new stdClass();
    $preview->uri = $path . '/' . $filename;
    $preview->filepath = $directory . '/' . $filename;

    if (!file_exists($preview->filepath)) {
      if ($data = @file_get_contents(YOUTUBE_IMAGE_URL . $youtube_id . '/0.jpg')) {
        file_save_data($data, $preview->uri, FILE_EXISTS_REPLACE);
      }
    }

    if (!file_exists($preview->filepath)) {
      // Create a placeholder image.
      $filename = 'youtube_default.jpg';
      $source = drupal_get_path('module', 'jw_player_youtube') . '/' . $filename;
      $preview->uri = $path . '/' . $filename;

      if (file_prepare_directory($path, FILE_CREATE_DIRECTORY) && ($data = file_get_contents($source))) {
        file_unmanaged_save_data($data, $preview->uri, FILE_EXISTS_REPLACE);
        $preview->filepath = $directory . '/' . $filename;
      }
    }
    return $preview;
  }
}
